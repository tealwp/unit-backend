// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/grpc/unit.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Unit_GetEventList_FullMethodName = "/Unit/GetEventList"
	Unit_GetEvent_FullMethodName     = "/Unit/GetEvent"
	Unit_CreateEvent_FullMethodName  = "/Unit/CreateEvent"
)

// UnitClient is the client API for Unit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitClient interface {
	GetEventList(ctx context.Context, in *GetEventListRequest, opts ...grpc.CallOption) (*GetEventListResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
}

type unitClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitClient(cc grpc.ClientConnInterface) UnitClient {
	return &unitClient{cc}
}

func (c *unitClient) GetEventList(ctx context.Context, in *GetEventListRequest, opts ...grpc.CallOption) (*GetEventListResponse, error) {
	out := new(GetEventListResponse)
	err := c.cc.Invoke(ctx, Unit_GetEventList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, Unit_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, Unit_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitServer is the server API for Unit service.
// All implementations must embed UnimplementedUnitServer
// for forward compatibility
type UnitServer interface {
	GetEventList(context.Context, *GetEventListRequest) (*GetEventListResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	mustEmbedUnimplementedUnitServer()
}

// UnimplementedUnitServer must be embedded to have forward compatible implementations.
type UnimplementedUnitServer struct {
}

func (UnimplementedUnitServer) GetEventList(context.Context, *GetEventListRequest) (*GetEventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventList not implemented")
}
func (UnimplementedUnitServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedUnitServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedUnitServer) mustEmbedUnimplementedUnitServer() {}

// UnsafeUnitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitServer will
// result in compilation errors.
type UnsafeUnitServer interface {
	mustEmbedUnimplementedUnitServer()
}

func RegisterUnitServer(s grpc.ServiceRegistrar, srv UnitServer) {
	s.RegisterService(&Unit_ServiceDesc, srv)
}

func _Unit_GetEventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServer).GetEventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unit_GetEventList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServer).GetEventList(ctx, req.(*GetEventListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unit_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unit_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unit_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Unit_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Unit_ServiceDesc is the grpc.ServiceDesc for Unit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Unit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Unit",
	HandlerType: (*UnitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventList",
			Handler:    _Unit_GetEventList_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Unit_GetEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Unit_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/unit.proto",
}
